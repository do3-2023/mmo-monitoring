name: release

on:
  push:
    tags:
    - '*'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: person
        ports:
        - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Setup Rust Toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
    - uses: Swatinem/rust-cache@v2
      with:
        cache-all-crates: true
    - name: Install just
      uses: extractions/setup-just@v2
    - name: Install SQLx CLI
      run: cargo install sqlx-cli --no-default-features --features native-tls,postgres
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Login to ghcr
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Build and push Docker image
      run: just docker-build-all ${{ github.ref_name }}

  update-versions:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs:
    - build
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Get latest version for frontend
      id: incremented_version_frontend
      shell: bash
      run: |
        TAG=$(yq eval '.version' helm/frontend/Chart.yaml)
        IFS='.' read -r -a VERSION <<< "$TAG"
        MAJOR=${VERSION[0]}
        MINOR=${VERSION[1]}
        PATCH=${VERSION[2]}

        echo "Current version: $TAG"
        echo "Major: $MAJOR"
        echo "Minor: $MINOR"
        echo "Patch: $PATCH"

        PATCH=$((PATCH + 1))

        NEW_TAG="$MAJOR.$MINOR.$PATCH"

        echo "New version will be: $NEW_TAG"
        echo "incremented_version_frontend=$NEW_TAG" >> $GITHUB_OUTPUT
    - name: Get latest version for backend
      id: incremented_version_backend
      shell: bash
      run: |
        TAG=$(yq eval '.version' helm/person/Chart.yaml)
        IFS='.' read -r -a VERSION <<< "$TAG"
        MAJOR=${VERSION[0]}
        MINOR=${VERSION[1]}
        PATCH=${VERSION[2]}

        echo "Current version: $TAG"
        echo "Major: $MAJOR"
        echo "Minor: $MINOR"
        echo "Patch: $PATCH"

        PATCH=$((PATCH + 1))

        NEW_TAG="$MAJOR.$MINOR.$PATCH"

        echo "New version will be: $NEW_TAG"
        echo "incremented_version_backend=$NEW_TAG" >> $GITHUB_OUTPUT
    - name: Update versions in charts
      env:
        incremented_version_frontend: ${{ steps.incremented_version_frontend.outputs.incremented_version_frontend }}
        incremented_version_backend: ${{ steps.incremented_version_backend.outputs.incremented_version_backend }}
      run: |
        yq eval -i '.version = "${{ steps.incremented_version_frontend.outputs.incremented_version_frontend }}"' helm/frontend/Chart.yaml
        yq eval -i '.appVersion = "${{ github.ref_name }}"' helm/frontend/Chart.yaml
        yq eval -i '.version = "${{ steps.incremented_version_frontend.outputs.incremented_version_frontend }}"' helm/person/Chart.yaml
        yq eval -i '.appVersion = "${{ github.ref_name }}"' helm/person/Chart.yaml
        yq eval -i '.releases[1].version = "${{ github.ref_name }}"' helmfile.yaml
        yq eval -i '.releases[2].version = "${{ github.ref_name }}"' helmfile.yaml
    - name: Commit and push updated versions
      run: |
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "GitHub Actions"
        git add helm/frontend/Chart.yaml helm/person/Chart.yaml helmfile.yaml
        git commit -m "bump(charts): ${{ github.ref_name }}"
        git push -u origin main
